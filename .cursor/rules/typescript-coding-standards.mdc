# TypeScript 编码标准

## 类型定义

- 使用 Zod 进行运行时类型验证，参考 [src/types/swagger.ts](mdc:src/types/swagger.ts)
- 优先使用 `z.infer<typeof Schema>` 来推导类型
- 为所有函数参数和返回值添加明确的类型注解

## 导入规范

- 使用 ES6 模块语法 (`import/export`)
- 按以下顺序组织导入：
  1. Node.js 内置模块 (`path`, `fs`, `express`)
  2. 第三方库 (`yaml`, `zod`, `fs-extra`)
  3. 本地模块 (`./types/swagger`)

## 错误处理

- 使用 try-catch 包装异步操作
- 在 [src/server.ts](mdc:src/server.ts) 中统一处理错误响应
- 提供有意义的错误信息

## 代码组织

- 将复杂逻辑拆分为独立函数
- 使用描述性的函数和变量名
- 添加必要的注释说明复杂算法

## 异步编程

- 优先使用 `async/await` 而不是 Promise 链
- 确保所有异步操作都有适当的错误处理
  description:
  globs:
  alwaysApply: false

---
